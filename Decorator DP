// Base interface (Component)
interface FoodItem {
    String getDescription();
    double getPrice();
}

// Concrete Component: Pizza
class Pizza implements FoodItem {
    public String getDescription() {
        return "Pizza";
    }

    public double getPrice() {
        return 200.0;
    }
}

// Concrete Component: Burger
class Burger implements FoodItem {
    public String getDescription() {
        return "Burger";
    }

    public double getPrice() {
        return 100.0;
    }
}

// Decorator (Abstract Class)
abstract class FoodDecorator implements FoodItem {
    protected FoodItem foodItem;

    public FoodDecorator(FoodItem item) {
        this.foodItem = item;
    }
}

// Concrete Decorator: Extra Cheese
class ExtraCheeseDecorator extends FoodDecorator {
    private double extraCheesePrice;

    public ExtraCheeseDecorator(FoodItem item, double price) {
        super(item);
        this.extraCheesePrice = price;
    }

    public String getDescription() {
        return foodItem.getDescription() + " with Extra Cheese";
    }

    public double getPrice() {
        return foodItem.getPrice() + extraCheesePrice;
    }
}

// Concrete Decorator: Extra Toppings
class ExtraToppingsDecorator extends FoodDecorator {
    private double extraToppingsPrice;

    public ExtraToppingsDecorator(FoodItem item, double price) {
        super(item);
        this.extraToppingsPrice = price;
    }

    public String getDescription() {
        return foodItem.getDescription() + " with Extra Toppings";
    }

    public double getPrice() {
        return foodItem.getPrice() + extraToppingsPrice;
    }
}

// Main class to test the implementation
public class Main {
    public static void main(String[] args) {
        FoodItem burgerOrder = new Burger();

        burgerOrder = new ExtraCheeseDecorator(burgerOrder, 20.0);
        burgerOrder = new ExtraToppingsDecorator(burgerOrder, 15.0);

        System.out.println("Description of burger order is: " + burgerOrder.getDescription());
        System.out.println("Price of burger order is: â‚¹" + burgerOrder.getPrice());
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>
using namespace std;

// Base interface representing a food item.
// Component
class FoodItem
{
public:
    virtual string getDescription() = 0;
    virtual double getPrice() = 0;
    virtual ~FoodItem() {}
};

// Concrete component
class Pizza : public FoodItem
{
public:
    string getDescription()
    {
        return "Pizza";
    }

    double getPrice()
    {
        return 200.0;
    }
};

// Concrete component
class Burger : public FoodItem
{
public:
    string getDescription()
    {
        return "Burger";
    }

    double getPrice()
    {
        return 100.0;
    }
};

class Decorator : public FoodItem
{
protected:
    FoodItem *foodItem;

public:
    Decorator(FoodItem *item) : foodItem(item) {}
};

// Concrete decorator for adding extra cheese.
class ExtraCheeseDecorator : public Decorator
{
private:
    double extraCheesePrice;

public:
    ExtraCheeseDecorator(FoodItem *item, double price)
        : Decorator(item), extraCheesePrice(price) {}

    string getDescription()
    {
        return foodItem->getDescription() + " with Extra Cheese";
    }

    double getPrice()
    {
        return foodItem->getPrice() + extraCheesePrice;
    }
};

// Concrete decorator for adding extra toppings.
class ExtraToppingsDecorator : public Decorator
{
private:
    double extraToppingsPrice;

public:
    ExtraToppingsDecorator(FoodItem *item, double price)
        : Decorator(item), extraToppingsPrice(price) {}

    string getDescription()
    {
        return foodItem->getDescription() + " with Extra Toppings";
    }

    double getPrice()
    {
        return foodItem->getPrice() + extraToppingsPrice;
    }
};

int main()
{
    FoodItem *burgerOrder = new Burger();

    burgerOrder = new ExtraCheeseDecorator(burgerOrder, 20.0);
    burgerOrder = new ExtraToppingsDecorator(burgerOrder, 15.0);

    cout << "Description of burger order is " << burgerOrder->getDescription() << endl;
    cout << "Price of burger order is : " << burgerOrder->getPrice() << endl;

    delete burgerOrder;

    return 0;
}

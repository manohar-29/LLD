#include <iostream>
using namespace std;

enum class Type {
    SOFA,
    TABLE,
    CHAIR
};

class Furniture {
    public:
        virtual void display(const string& name) = 0;
        virtual ~Furniture() {}
};

class Sofa : public Furniture {
    public:
        void display(const string& name)
        {
            cout<<"SOFA : "<<name<<endl;
        }
};

class Table : public Furniture{
    public:
        void display(const string& name)
        {
            cout<<"TABLE : "<<msg<<endl;
        }
};

class Chair : public Furniture {
    public:
        void display(const string& name)
        {
            cout << "CHAIR : " << name << endl;
        }
};

class FurnitureFactory {
    public:
        static Furniture* createLogger(LogLevel pLogLevel)
        {
            if(pLogLevel == LogLevel::CHAIR)
                return new Chair();
            if(pLogLevel == LogLevel::SOFA)
                return new Sofa();
            if(pLogLevel == LogLevel::TABLE)
                return new Table();
            return nullptr;
        }
};

int main() {
    
    Furniture* sofa = FurnitureFactory::createLogger(LogLevel::SOFA);
    Furniture* table = FurnitureFactory::createLogger(LogLevel::TABLE);
    Furniture* chair = FurnitureFactory::createLogger(LogLevel::CHAIR);

   
    sofa->display("This is an sofa display name");
    table->display("This is an table display name");
    chair->display("This is a chair display name");

    delete sofa;
    delete table;
    delete chair;

    return 0;
}


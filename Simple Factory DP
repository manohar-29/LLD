enum Type {
    SOFA,
    TABLE,
    CHAIR
}

interface Furniture {
    void display(String name);
}

class Sofa implements Furniture {
    public void display(String name) {
        System.out.println("SOFA : " + name);
    }
}

class Table implements Furniture {
    public void display(String name) {
        System.out.println("TABLE : " + name);
    }
}

class Chair implements Furniture {
    public void display(String name) {
        System.out.println("CHAIR : " + name);
    }
}

class FurnitureFactory {
    static Furniture createFurniture(Type type) {
        switch (type) {
            case SOFA:
                return new Sofa();
            case TABLE:
                return new Table();
            case CHAIR:
                return new Chair();
            default:
                return null;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Furniture sofa = FurnitureFactory.createFurniture(Type.SOFA);
        Furniture table = FurnitureFactory.createFurniture(Type.TABLE);
        Furniture chair = FurnitureFactory.createFurniture(Type.CHAIR);

        sofa.display("This is an sofa display name");
        table.display("This is an table display name");
        chair.display("This is a chair display name");
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>
using namespace std;

enum class Type {
    SOFA,
    TABLE,
    CHAIR
};

class Furniture {
    public:
        virtual void display(const string& name) = 0;
        virtual ~Furniture() {}
};

class Sofa : public Furniture {
    public:
        void display(const string& name)
        {
            cout<<"SOFA : "<<name<<endl;
        }
};

class Table : public Furniture{
    public:
        void display(const string& name)
        {
            cout<<"TABLE : "<<msg<<endl;
        }
};

class Chair : public Furniture {
    public:
        void display(const string& name)
        {
            cout << "CHAIR : " << name << endl;
        }
};

class FurnitureFactory {
    public:
        static Furniture* createFurniture(Type type)
        {
            if(type == Type::CHAIR)
                return new Chair();
            if(type == Type::SOFA)
                return new Sofa();
            if(type == Type::TABLE)
                return new Table();
            return nullptr;
        }
};

int main() {
    
    Furniture* sofa = FurnitureFactory::createFurniture(Type::SOFA);
    Furniture* table = FurnitureFactory::createFurniture(Type::TABLE);
    Furniture* chair = FurnitureFactory::createFurniture(Type::CHAIR);
   
    sofa->display("This is an sofa display name");
    table->display("This is an table display name");
    chair->display("This is a chair display name");

    delete sofa;
    delete table;
    delete chair;

    return 0;
}


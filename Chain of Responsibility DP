#include <iostream>
using namespace std;

// Define the abstract base class for order handlers.
class OrderHandler {
    protected:
        OrderHandler* nextHandler;
    public:
        OrderHandler(OrderHandler* nextHandler) : nextHandler(nextHandler) {}

        virtual void processOrder(const string& order) = 0;
};

// Concrete handler for payment processing.
class PaymentProcessingHanlder : public OrderHandler {
    public:
        //Initializes PaymentProcessingHanlder object and passes argument nextHandler to initialize constructor of base class OrderHandler.
        PaymentProcessingHanlder(OrderHandler* nextHandler) : OrderHandler(nextHandler) {}

        void processOrder(const string& order) {
            cout<<"Processing payment for order: "<<order<<endl;

            if(nextHandler)
                nextHandler->processOrder(order);
        }

        ~PaymentProcessingHanlder() {
            cout<<"PaymentProcessingHanlder dtor called"<<endl;
        }
};

// Concrete handler for delivery assignment.
class DeliveryAssignmentHandler : public OrderHandler {
    public:
        //Initializes DeliveryAssignmentHandler object and passes argument nextHandler to initialize constructor of base class OrderHandler.
        DeliveryAssignmentHandler(OrderHandler* nexxtHandler) : OrderHandler(nextHandler) {}

        void processOrder(const string& order) {
            cout<<"Assigning delivery for order: "<<order<<endl;

            if(nextHandler)
                nextHandler->processOrder(order);
        }

        ~DeliveryAssignmentHandler() {
            cout<<"DeliveryAssignmentHandler dtor called"<<endl;
        }
};

// Concrete handler for order tracking.
class OrderTrackingHandler : public OrderHandler {
    public:
        //Initializes OrderTrackingHandler object and passes argument nextHandler to initialize constructor of base class OrderHandler.
        OrderTrackingHandler(OrderHandler* nexxtHandler) : OrderHandler(nextHandler) {}

        void processOrder(const string& order) {
            cout<<"Tracking order: "<<order<<endl;

            if(nextHandler)
                nextHandler->processOrder(order);
        }

        ~OrderTrackingHandler() {
            cout<<"OrderTrackingHandler dtor called"<<endl;
        }
};

int main() {
    
    // Create a chain of responsibility for order processing
    OrderHandler* orderProcessingChain = 
            new PaymentProcessingHanlder(
                    new DeliveryAssignmentHandler(  
                        new OrderTrackingHandler(nullptr)));

    // Simulate an order being placed
    string order = "Pizza";
    orderProcessingChain->processOrder(order);

    /*
        OrderHandler* orderTrackingHandler = new OrderTrackingHandler(nullptr);
        OrderHandler* deliveryAssignmentHandler = new DeliveryAssignmentHandler(orderTrackingHandler);
        OrderHandler* paymentProcessingHandler = new PaymentProcessingHandler(deliveryAssignmentHandler);

        // Simulate an order being placed
        string order = "French Fries";
        paymentProcessingHandler->processOrder(order);

        // Clean up by deleting all handler objects
        delete paymentProcessingHandler;
        delete deliveryAssignmentHandler;
        delete orderTrackingHandler;
    
        //Or use shared pointers so that we don't have to handle cleanup
    */

   /*
   //Add setters to choose successor or next handler on run-time
   //Hanlder will have setSuccessor func
    orderValidation.setSuccessor(paymentProcessing);
    paymentProcessing.setSuccessor(shipping);
   */

    return 0;
}

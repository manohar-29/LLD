// Abstract Handler
abstract class OrderHandler {
    protected OrderHandler orderHandler;

    public OrderHandler(OrderHandler nextHandler) {
        this.orderHandler = nextHandler;
    }

    public abstract void processOrder(String order);
}

// Concrete Handler: Payment Processing
class PaymentProcessingHandler extends OrderHandler {

    public PaymentProcessingHandler(OrderHandler nextHandler) {
        super(nextHandler);
    }

    public void processOrder(String order) {
        System.out.println("Processing payment for order: " + order);

        if (order.equals("Invalid order")) {
            this.orderHandler = new InvalidOrderHandler(null);
        }

        if (orderHandler != null) {
            orderHandler.processOrder(order);
        }
    }
}

// Concrete Handler: Delivery Assignment
class DeliveryAssignmentHandler extends OrderHandler {

    public DeliveryAssignmentHandler(OrderHandler nextHandler) {
        super(nextHandler);
    }

    public void processOrder(String order) {
        System.out.println("Assigning delivery for order: " + order);

        if (orderHandler != null) {
            orderHandler.processOrder(order);
        }
    }
}

// Concrete Handler: Order Tracking
class OrderTrackingHandler extends OrderHandler {

    public OrderTrackingHandler(OrderHandler nextHandler) {
        super(nextHandler);
    }

    public void processOrder(String order) {
        System.out.println("Tracking order: " + order);

        if (orderHandler != null) {
            orderHandler.processOrder(order);
        }
    }
}

// Concrete Handler: Invalid Order
class InvalidOrderHandler extends OrderHandler {

    public InvalidOrderHandler(OrderHandler nextHandler) {
        super(nextHandler);
    }

    public void processOrder(String order) {
        System.out.println("Invalid order: " + order);

        if (orderHandler != null) {
            orderHandler.processOrder(order);
        }
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        OrderHandler handlerChain = new PaymentProcessingHandler(
            new DeliveryAssignmentHandler(
                new OrderTrackingHandler(null)
            )
        );

        System.out.println("=== Valid Order ===");
        handlerChain.processOrder("Pizza");

        System.out.println("\n=== Invalid Order ===");
        handlerChain.processOrder("Invalid order");
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>
using namespace std;

// Define the abstract base class for order handlers.
class OrderHandler {
    protected:
        OrderHandler* orderHandler;
    public:
        OrderHandler(OrderHandler* orderHandler) : orderHandler(orderHandler) {}

        virtual void processOrder(const string& order) = 0;
};

// Concrete handler for payment processing.
class PaymentProcessingHanlder : public OrderHandler {
    public:
        //Initializes PaymentProcessingHanlder object and passes argument nextHandler to initialize constructor of base class OrderHandler.
        PaymentProcessingHanlder(OrderHandler* nextHandler) : OrderHandler(nextHandler) {}

        void processOrder(const string& order) {
            cout<<"Processing payment for order: "<<order<<endl;

            if(nextHandler)
                nextHandler->processOrder(order);
        }

        ~PaymentProcessingHanlder() {
            cout<<"PaymentProcessingHanlder dtor called"<<endl;
        }
};

// Concrete handler for delivery assignment.
class DeliveryAssignmentHandler : public OrderHandler {
    public:
        //Initializes DeliveryAssignmentHandler object and passes argument nextHandler to initialize constructor of base class OrderHandler.
        DeliveryAssignmentHandler(OrderHandler* nexxtHandler) : OrderHandler(nextHandler) {}

        void processOrder(const string& order) {
            cout<<"Assigning delivery for order: "<<order<<endl;

            if(nextHandler)
                nextHandler->processOrder(order);
        }

        ~DeliveryAssignmentHandler() {
            cout<<"DeliveryAssignmentHandler dtor called"<<endl;
        }
};

// Concrete handler for order tracking.
class OrderTrackingHandler : public OrderHandler {
    public:
        //Initializes OrderTrackingHandler object and passes argument nextHandler to initialize constructor of base class OrderHandler.
        OrderTrackingHandler(OrderHandler* nexxtHandler) : OrderHandler(nextHandler) {}

        void processOrder(const string& order) {
            cout<<"Tracking order: "<<order<<endl;

            if(nextHandler)
                nextHandler->processOrder(order);
        }

        ~OrderTrackingHandler() {
            cout<<"OrderTrackingHandler dtor called"<<endl;
        }
};

int main() {
    
    // Create a chain of responsibility for order processing
    OrderHandler* orderProcessingChain = 
            new PaymentProcessingHanlder(
                    new DeliveryAssignmentHandler(  
                        new OrderTrackingHandler(nullptr)));

    // Simulate an order being placed
    string order = "Pizza";
    orderProcessingChain->processOrder(order);

    /*
        OrderHandler* orderTrackingHandler = new OrderTrackingHandler(nullptr);
        OrderHandler* deliveryAssignmentHandler = new DeliveryAssignmentHandler(orderTrackingHandler);
        OrderHandler* paymentProcessingHandler = new PaymentProcessingHandler(deliveryAssignmentHandler);

        // Simulate an order being placed
        string order = "French Fries";
        paymentProcessingHandler->processOrder(order);

        // Clean up by deleting all handler objects
        delete paymentProcessingHandler;
        delete deliveryAssignmentHandler;
        delete orderTrackingHandler;
    
        //Or use shared pointers so that we don't have to handle cleanup
    */

   /*
   //Add setters to choose successor or next handler on run-time
   //Hanlder will have setSuccessor func
    paymentProcessingHandler.setSuccessor(generateBill);
   */

    return 0;
}

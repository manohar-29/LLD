/* So here we encapsulated Builder class inside Desktop and made it static. So byheart this notation that if you made class static 'B'
by encapsulating it inside another class 'D' then you cannot access 'B' methods using D.B.method(), you need object so for such static 
classes we use, D.B obj = new D.B(); Now you can use it to call B's methods. Instead we can keep them separately and normally create 
builder object as well but Builder DP should use static class. Now we have Desktop with fields and while creating object we can pass 
few or all of the parameters. So for optional fields instead of default we can also pass values. So, in Desktop class we don't have any
setters(except for mutable fields that can be modified by other class) and there are only getters() as it can be used by some class later. 
We basically build object in Builder class using methods for setiing optional fields and they will be called only if object don't want
them to take default value. For mandatory fields we pass parameters while creating Builder object. We have build() which creates Desktop
by passing Builder object to D's constructor which copies all fields. So basically both D and B declare all fields, D creates object
with field values as B object and B use methods for optional fields, constructor for mandatory fields. If you want same mandatory field then
use same B object else different one. */

// Product
class Desktop {
    int id;
    String processor;
    String memory;
    String storage;
    String graphicsCard;
    
    private Desktop(DesktopBuilder builder)
    {
        this.processor = processor;
        this.memory = memory;
        this.storage = storage;
    }

    public int getId()
    {
        return this.id;
    }
    public String getProcessor()
    {
        return this.processor;
    }
    public String getMemory()
    {
        return this.memory;
    }
    public String getStorage()
    {
        return this.storage;
    }
    
    public void getStorage(String str)
    {
        this.storage = str;
    }

    public static class DesktopBuilder {
        int id;
        String processor = "default";
        String memory = "default";
        String storage = "default";
        String graphicsCard = "default";

        public DesktopBuilder(int id) {
            this.id =id;
        }
        
        public DesktopBuilder setProcessor(String str) {
            this.processor = str;
            return this;
        }
        public DesktopBuilder setMemory(String str) {
            this.memory = str;
            return this;
        }
        public DesktopBuilder setStorage(String str) {
            this.storage = str;
            return this;
        }
        public DesktopBuilder setGraphicCard(String str) {
            this.graphicsCard = str;
            return this;
        }
        
        public Desktop build()
        {
            return new Desktop(this);
        }
    }
}

// Main Class
public class Main {
    public static void main(String[] args) {
        
        Desktop.DesktopBuilder builder1 = new Desktop.DesktopBuilder(123);
        Desktop desktop1 = builder1.setProcessor("")
                            .setMemory("")
                            .setStorage("")
                            .build();

        Desktop.DesktopBuilder builder2 = new Desktop.DesktopBuilder(789);
        Desktop desktop2 = builder2.setProcessor("")
                            .setMemory("")
                            .build();
    
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>
using namespace std;

/*
Desktop is the Product. DesktopBuilder is abstract builder class and lenovoBuilder, dellBuilder are concrete builder class 
which implement abstract methods. There is a Director class which uses abstract Builder class DesktopBuilder and call 
abstract methods like buildMonitor(), builldMouse() etc. DesktopBuilder uses Desktop variable to access itâ€™s fields and 
subclasses lenovoBuilder, dellBuilder uses superclass variable to set fields. 
*/

class Desktop
{
public:
    string motherboard;
    string processor;
    string memory;
    string storage;
    string graphicsCard;

    void display()
    {
        cout << "Desktop Specs:" << endl;
        cout << "Motherboard: " << motherboard << endl;
        cout << "Processor: " << processor << endl;
        cout << "Memory: " << memory << endl;
        cout << "Storage: " << storage << endl;
        cout << "Graphics Card: " << graphicsCard << endl;
    }
};

class DesktopBuilder
{
protected:
    Desktop desktop;

public:
    virtual void buildMotherboard() = 0;
    virtual void buildProcessor() = 0;
    virtual void buildMemory() = 0;
    virtual void buildStorage() = 0;
    virtual void buildGraphicsCard() = 0;

    Desktop getDesktop()
    {
        return desktop;
    }
};

class DellDesktopBuilder : public DesktopBuilder
{
public:
    void buildMotherboard()
    {
        desktop.motherboard = "Dell Motherboard";
    }

    void buildProcessor()
    {
        desktop.processor = "Dell Processor";
    }

    void buildMemory()
    {
        desktop.memory = "32GB DDR4 RAM";
    }

    void buildStorage()
    {
        desktop.storage = "1TB SSD + 2TB HDD";
    }

    void buildGraphicsCard()
    {
        desktop.graphicsCard = "NVIDIA RTX 3080";
    }
};

class HpDesktopBuilder : public DesktopBuilder
{
public:
    void buildMotherboard()
    {
        desktop.motherboard = "HP Motherboard";
    }

    void buildProcessor()
    {
        desktop.processor = "Intel Core i5";
    }

    void buildMemory()
    {
        desktop.memory = "16GB DDR4 RAM";
    }

    void buildStorage()
    {
        desktop.storage = "512GB SSD";
    }

    void buildGraphicsCard()
    {
        desktop.graphicsCard = "Integrated Graphics";
    }
};

class DesktopDirector
{
public:
    Desktop buildDesktop(DesktopBuilder &builder)
    {
        builder.buildMotherboard();
        builder.buildProcessor();
        builder.buildMemory();
        builder.buildStorage();
        builder.buildGraphicsCard();
        return builder.getDesktop();
    }
};

int main()
{
    DesktopDirector director;

    DellDesktopBuilder dellDesktopBuilder;
    Desktop dellDesktop = director.buildDesktop(dellDesktopBuilder);

    HpDesktopBuilder hpDesktopBuilder;
    Desktop hpDesktop = director.buildDesktop(hpDesktopBuilder);

    dellDesktop.display();
    hpDesktop.display();

    return 0;
}

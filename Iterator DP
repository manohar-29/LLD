import java.util.*;

// PlaylistIterator Interface
interface PlaylistIterator {
    boolean hasNext();
    String next();
}

// Playlist Class
class Playlist {
    private ArrayList<String> songs;

    public Playlist() {
        songs = new ArrayList<>();
    }

    public void addSong(String song) {
        songs.add(song);
    }

    public PlaylistIterator iterator(String type) {
        switch (type) {
            case "sorted":
                return new SortedPlaylistIterator(this);
            case "favorites":
                return new FavoritesPlaylistIterator(this);
            default:
                return null;
        }
    }

    public ArrayList<String> getSongs() {
        return songs;
    }
}

// SortedPlaylistIterator (Sorts songs alphabetically)
class SortedPlaylistIterator implements PlaylistIterator {
    private List<String> sortedSongs;
    private int index;

    public SortedPlaylistIterator(Playlist playlist) {
        this.sortedSongs = new ArrayList<>(playlist.getSongs());
        Collections.sort(this.sortedSongs); // sort alphabetically
        this.index = 0;
    }

    @Override
    public boolean hasNext() {
        return index < sortedSongs.size();
    }

    @Override
    public String next() {
        return sortedSongs.get(index++);
    }
}

// FavoritesPlaylistIterator (Only songs with "Fav" in the name)
class FavoritesPlaylistIterator implements PlaylistIterator {
    private List<String> favSongs;
    private Playlist playlist;
    private int index;
    private boolean flag;

    public FavoritesPlaylistIterator(Playlist playlist) {
        this.favSongs = new ArrayList<>();
        this.playlist = playlist;
        this.index = 0;
        this.flag = true;
    }

    @Override
    public boolean hasNext() {
        if (flag) {
          flag = false;
          int ind = 0;
          while (ind < playlist.getSongs().size()) {
            if (playlist.getSongs().get(ind).contains("Fav")) {
                favSongs.add(playlist.getSongs().get(ind));
            }
            ind++;
          }
        }
        return index < favSongs.size();
    }

    @Override
    public String next() {
        return favSongs.get(index++);
    }
}

// Main Class
public class Main {
    public static void main(String[] args) {
        // Create a playlist
        Playlist playlist = new Playlist();
        playlist.addSong("Song 1");
        playlist.addSong("Song 2 Fav");
        playlist.addSong("Alpha Song");
        playlist.addSong("Beta Fav");
        playlist.addSong("Zebra");

        // Sorted Playlist Iterator
        System.out.println("Sorted Playlist:");
        PlaylistIterator sortedIterator = playlist.iterator("sorted");
        while (sortedIterator.hasNext()) {
            System.out.println("Playing: " + sortedIterator.next());
        }

        // Favorites Playlist Iterator
        System.out.println("\nFavorites Playlist:");
        PlaylistIterator favoritesIterator = playlist.iterator("favorites");
        while (favoritesIterator.hasNext()) {
            System.out.println("Playing: " + favoritesIterator.next());
        }
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>

using namespace std;

// Product class representing individual products
class Product {
    private:
        string name;
        double price;

    public:
        Product(const string& name, const double& price) : name(name), price(price) {}

        const string& getName() const {
            return name;
        }

        double getPrice() const {
            return price;
        }
};

// Iterator interface
class Iterator {
    public:
        virtual ~Iterator() {}
        virtual Product* first() = 0;
        virtual Product* next() = 0;
};

// Concrete iterator for the product collection
class ProductIterator : public Iterator {
    private:

        vector<Product*>& products;
        size_t current;

    public:

        ProductIterator(vector<Product*>& products) : products(products), current(0) {}

        Product* first() {
            if (products.empty()) {
                return nullptr;
            }
            current = 0;
            return products[current];
        }

        Product* next() {
            if (current < products.size()) {
                return products[++current];
            }
            return nullptr;
        }
};

// Aggregate class that stores products and provides an iterator
class Inventory {
    private:
        vector<Product*> products;
    public:
        void addProduct(Product* product) {
            products.push_back(product);
        }

        Iterator* createIterator() {
            return new ProductIterator(products);
        }
};


int main() {

    // Create some products
    Product product1("Laptop", 99999.99);
    Product product2("Smartphone", 49999.99);
    Product product3("Headphones", 7999.99);

    // Create an inventory and add products
    Inventory inventory;
    inventory.addProduct(&product1);
    inventory.addProduct(&product2);
    inventory.addProduct(&product3);

    // Create an iterator and iterate over the products
    Iterator* iterator = inventory.createIterator();
    Product* currentProduct = iterator->first();

    while (currentProduct) {
        cout << "Product: " << currentProduct->getName() << 
                        ", Price: $" << currentProduct->getPrice() << std::endl;
        currentProduct = iterator->next();
    }

    delete iterator;

    return 0;
}

public class PaymentGateway {

    private static PaymentGateway instance;
    private static final Object lock = new Object();

    // Private constructor
    private PaymentGateway() {
        System.out.println("Payment Gateway Manager initialized.");
    }

    // Static method to get the single instance
    public static PaymentGateway getInstance() {
        if (instance == null) { // First null check (without lock)
            synchronized (lock) {
                if (instance == null) { // Second null check (with lock)
                    instance = new PaymentGateway();
                }
            }
        }
        return instance;
    }

    public void processPayment(double amount) {
        System.out.println("Processing payment of $" + amount + " through the payment gateway.");
    }

    // Main method to test
    public static void main(String[] args) {
        PaymentGateway paymentGateway = PaymentGateway.getInstance();
        paymentGateway.processPayment(1000);

        // Try to get another instance
        PaymentGateway anotherPaymentGateway = PaymentGateway.getInstance();

        // Check if both instances are the same
        if (paymentGateway == anotherPaymentGateway) {
            System.out.println("Both instances are the same. Singleton pattern is working");
        } else {
            System.out.println("Singleton pattern is not working correctly");
        }
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>
using namespace std;

/*Here Double checked means 2 if-conditions. If if-null checks(without double-checked locking) are 
removed then code is thread safe but expensive. If mutex is removed then code is not thread safe.*/

class PaymentGateway
{

private:
    PaymentGateway()
    {
        cout << "Payment Gateway Manager initialized." << endl;
    }

    static PaymentGateway *instance;

    static mutex mtx;

public:
    static PaymentGateway *getInstance()
    {
        if (instance == nullptr)
        {
            mtx.lock();
            if (instance == nullptr)
            {
                instance = new PaymentGateway();
            }
            mtx.unlock();
        }
        return instance;
    }

    void processPayment(double amount)
    {
        cout << "Processing payment of $" << amount << " through the payment gateway." << endl;
    }
};

PaymentGateway *PaymentGateway::instance = nullptr;

mutex PaymentGateway::mtx;

int main()
{

    PaymentGateway *paymentGateway = PaymentGateway::getInstance();

    paymentGateway->processPayment(1000);

    // Attempt to create another instance (should return the existing instance)
    PaymentGateway *anotherPaymentGateway = PaymentGateway::getInstance();

    // Check if both instances are the same.
    if (paymentGateway == anotherPaymentGateway)
    {
        cout << "Both instances are the same. Singleton pattern is working" << endl;
    }
    else
    {
        cout << "Singleton pattern is not working correctly" << endl;
    }
    return 0;
}

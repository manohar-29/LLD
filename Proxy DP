import java.util.Arrays;
import java.util.List;

// Subject Interface
interface Internet {
    void connectTo(String site);
}

// Real Subject
class RealInternet implements Internet {
    public void connectTo(String site) {
        System.out.println("Connecting to " + site);
    }
}

// Proxy
class ProxyInternet implements Internet {
    private RealInternet realInternet = new RealInternet();
    private String user;
    private static final List<String> blockedSites = Arrays.asList("restricted.com", "blockedsite.com");

    public ProxyInternet(String user) {
        this.user = user;
    }

    @Override
    public void connectTo(String site) {
        if (user.equals("guest") && blockedSites.contains(site)) {
            System.out.println("Access Denied: '" + site + "' is blocked for user '" + user + "'");
            return;
        }
        realInternet.connectTo(site);
    }
}

// Client Code
public class Main {
    public static void main(String[] args) {
        Internet guestInternet = new ProxyInternet("guest");
        guestInternet.connectTo("example.com");      // Allowed
        guestInternet.connectTo("restricted.com");   // Blocked

        System.out.println();

        Internet adminInternet = new ProxyInternet("admin");
        adminInternet.connectTo("restricted.com");   // Allowed
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################



#include <iostream>
#include <string>
using namespace std;

// Subject Interface
class Internet {
public:
    virtual void connectTo(string site) = 0;
    virtual ~Internet() {}
};

// Real Subject
class RealInternet : public Internet {
public:
    void connectTo(string site) {
        cout << "Connecting to " << site << endl;
    }
};

// Proxy
class ProxyInternet : public Internet {
private:
    RealInternet* realInternet;
    string user;

public:
    ProxyInternet(string user) : user(user), realInternet(nullptr) {}

    void connectTo(string site) {
        if (!realInternet) {
            realInternet = new RealInternet();
        }
        realInternet->connectTo(site);
    }

    ~ProxyInternet() {
        delete realInternet;
    }
};

// Usage
int main() {
    Internet* internet = new ProxyInternet("guest");
    internet->connectTo("example.com");
    internet->connectTo("restricted.com"); //Cannot connect as same internet object used which already initialized realInternet(!nullptr).

    delete internet;

    return 0;
}

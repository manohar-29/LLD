import java.util.*;

// Abstraction Layer
interface FileSystem {
    void getContents();
    int getSize();
}

// Concrete Implementation: File
class File implements FileSystem {
    private String name;
    private int size;

    public File(String fileName, int fileSize) {
        this.name = fileName;
        this.size = fileSize;
    }

    @Override
    public void getContents() {
        System.out.println("File: " + name);
    }

    @Override
    public int getSize() {
        return size;
    }
}

// Concrete Implementation: Directory
class Directory implements FileSystem {
    private String name;
    private List<FileSystem> contents;

    public Directory(String dirName) {
        this.name = dirName;
        this.contents = new ArrayList<>();
    }

    public void addComponent(FileSystem component) {
        contents.add(component);
    }

    @Override
    public void getContents() {
        System.out.println("Directory: " + name);
        for (FileSystem component : contents) {
            component.getContents();
        }
    }

    @Override
    public int getSize() {
        int totalSize = 0;
        for (FileSystem component : contents) {
            totalSize += component.getSize();
        }
        return totalSize;
    }
}

// Main class
public class directorystructure {
    public static void main(String[] args) {
        Directory root = new Directory("Root");

        FileSystem file1 = new File("Document.txt", 100);
        FileSystem file2 = new File("Image.jpg", 200);

        Directory subDir = new Directory("Subdirectory");
        FileSystem file3 = new File("Data.csv", 150);

        subDir.addComponent(file3);

        root.addComponent(file1);
        root.addComponent(file2);
        root.addComponent(subDir);

        // Print contents and total size
        root.getContents();
        int totalSize = root.getSize();
        System.out.println("Total Size: " + totalSize + " KB");
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>

using namespace std;

class EmployeeComponent {
public:
    virtual void displayInfo() = 0;
    virtual double calculateSalary() = 0;
    virtual ~EmployeeComponent() {}
};

class Employee : public EmployeeComponent {
private:
    string name;
    double salary;

public:
    Employee(string empName, double empSalary) : name(empName), salary(empSalary) {}

    void displayInfo() override {
        cout << "Employee: " << name << " Salary: Rs." << salary << endl;
    }

    double calculateSalary() override {
        return salary;
    }
};

class Department : public EmployeeComponent {
private:
    string name;
    vector<EmployeeComponent*> members;

public:
    Department(string deptName) : name(deptName) {}

    void addMember(EmployeeComponent* member) {
        members.push_back(member);
    }

    void displayInfo() override {
        cout << "Department: " << name << endl;
        for (auto member : members) {
            member->displayInfo();
        }
    }

    double calculateSalary() override {
        double totalSalary = 0.0;
        for (auto member : members) {
            totalSalary += member->calculateSalary();
        }
        return totalSalary;
    }
};

class Organization : public EmployeeComponent {
private:
    string name;
    vector<EmployeeComponent*> members;

public:
    Organization(string orgName) : name(orgName) {}

    void addMember(EmployeeComponent* member) {
        members.push_back(member);
    }

    void displayInfo() override {
        cout << "Organization: " << name << endl;
        for (auto& member : members) {
            member->displayInfo();
        }
    }

    double calculateSalary() override {
        double totalSalary = 0.0;
        for (auto member : members) {
            totalSalary += member->calculateSalary();
        }
        return totalSalary;
    }
};


int main() {
    EmployeeComponent* keerti = new Employee("Keerti", 100.0); //Level2
    EmployeeComponent* amit = new Employee("Amit", 200.0); //Level2

    Department* sales = new Department("Sales"); //Level1
    sales->addMember(keerti);
    sales->addMember(amit);

    EmployeeComponent* bob = new Employee("Bob", 50.0); //Level2

    Department* marketing = new Department("Marketing"); //Level1
    marketing->addMember(bob);

    Organization* headOffice = new Organization("Head Office"); //Level0
    headOffice->addMember(sales);
    headOffice->addMember(marketing);

    // Display info of all employees and calculate total salary for the organization 
    headOffice->displayInfo();
    double totalSalary = headOffice->calculateSalary();
    cout << "Total Salary for the Organization: Rs." << totalSalary << endl;

    // Clean up memory (consider using smart pointers in a real application)
    delete keerti; delete amit; delete bob;
    delete sales; delete marketing; delete headOffice;

    return 0;
}

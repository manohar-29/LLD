// Receiver: Database
class Database {
    public void insert(String record) {
        System.out.println("Inserting record: " + record);
    }

    public void update(String record) {
        System.out.println("Updating record: " + record);
    }

    public void delete(String record) {
        System.out.println("Deleting record: " + record);
    }
}

// Command Interface
interface Command {
    void execute();
}

// Concrete Command: InsertCommand
class InsertCommand implements Command {
    private Database database;
    private String record;

    public InsertCommand(Database database, String record) {
        this.database = database;
        this.record = record;
    }

    public void execute() {
        database.insert(record);
    }
}

// Concrete Command: UpdateCommand
class UpdateCommand implements Command {
    private Database database;
    private String record;

    public UpdateCommand(Database database, String record) {
        this.database = database;
        this.record = record;
    }

    public void execute() {
        database.update(record);
    }
}

// Concrete Command: DeleteCommand
class DeleteCommand implements Command {
    private Database database;
    private String record;

    public DeleteCommand(Database database, String record) {
        this.database = database;
        this.record = record;
    }

    public void execute() {
        database.delete(record);
    }
}

// Invoker: DatabaseInvoker
class DatabaseInvoker {
    public void executeCommand(Command command) {
        command.execute();
    }
}

// Main class to test the design
public class Main {
    public static void main(String[] args) {
        Database db = new Database();
        DatabaseInvoker invoker = new DatabaseInvoker();

        Command insert = new InsertCommand(db, "Record 1");
        Command update = new UpdateCommand(db, "Record 1");
        Command delete = new DeleteCommand(db, "Record 1");

        invoker.executeCommand(insert);
        invoker.executeCommand(update);
        invoker.executeCommand(delete);
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>

using namespace std;

// Receiver: RideService
class RideService {
public:
    void requestRide(const string& passenger, const string& srcLoc, const string& destLoc) {
        cout << "Requesting a ride for passenger: " << passenger
             << " from " << srcLoc << " to " << destLoc << endl;
        // Additional ride request processing logic here
    }

    void cancelRide(const string& passenger) {
        cout << "Canceling the ride for passenger: " << passenger << endl;
        // Additional cancellation logic here
    }
};

// Abstract Command interface
class Command {
public:
    virtual void execute() = 0;
    virtual ~Command() {}
};

// Concrete Command: RideRequestCommand
class RideRequestCommand : public Command {
private:
    RideService* receiver;
    string passenger;
    string srcLoc;
    string destLoc;

public:
    RideRequestCommand(RideService* receiver, const string& passenger, const string& srcLoc, const string& destLoc)
        : receiver(receiver), passenger(passenger), srcLoc(srcLoc), destLoc(destLoc) {}

    void execute() override {
        receiver->requestRide(passenger, srcLoc, destLoc);
    }
};

// Concrete Command: CancelRideCommand
class CancelRideCommand : public Command {
private:
    RideService* receiver;
    string passenger;

public:
    CancelRideCommand(RideService* receiver, const string& passenger)
        : receiver(receiver), passenger(passenger) {}

    void execute() override {
        receiver->cancelRide(passenger);
    }
};

// Invoker: RideRequestInvoker
class RideRequestInvoker {
public:
    void processRequest(Command* command) {
        command->execute();
    }
};

int main() {
    // Create a receiver
    RideService rideService;

    // Create an invoker
    RideRequestInvoker rideRequestInvoker;

    // Execute ride request and cancellation commands directly
    Command* request1 = new RideRequestCommand(&rideService, "Keerti", "Sarjapur", "Koramangala");
    Command* request2 = new RideRequestCommand(&rideService, "Amit", "Koramangala", "Indiranagar");
    Command* cancel1 = new CancelRideCommand(&rideService, "Keerti");

    // Process the ride requests and cancellations
    rideRequestInvoker.processRequest(request1);
    rideRequestInvoker.processRequest(request2);
    rideRequestInvoker.processRequest(cancel1);

    // Clean up
    delete request1;
    delete request2;
    delete cancel1;

    return 0;
}

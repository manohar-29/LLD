// Abstract Product: Account
interface Account {
    void display();
}

// Concrete Products: Savings, Current, Business
class SavingsAccount implements Account {
    public void display() {
        System.out.println("Savings Account");
    }
}

class CurrentAccount implements Account {
    public void display() {
        System.out.println("Current Account");
    }
}

class BusinessAccount implements Account {
    public void display() {
        System.out.println("Business Account");
    }
}

// Abstract Creator: AccountFactory
interface AccountFactory {
    Account createAccount();
}

// Concrete Creators: SavingsFactory, CurrentFactory, BusinessFactory
class SavingsAccountFactory implements AccountFactory {
    public Account createAccount() {
        return new SavingsAccount();
    }
}

class CurrentAccountFactory implements AccountFactory {
    public Account createAccount() {
        return new CurrentAccount();
    }
}

class BusinessAccountFactory implements AccountFactory {
    public Account createAccount() {
        return new BusinessAccount();
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Create factories for different types of accounts
        AccountFactory savingsFactory = new SavingsAccountFactory();
        AccountFactory currentFactory = new CurrentAccountFactory();
        AccountFactory businessFactory = new BusinessAccountFactory();

        // Create account objects using the factory methods
        Account savings = savingsFactory.createAccount();
        Account current = currentFactory.createAccount();
        Account business = businessFactory.createAccount();

        // Display the created account types
        savings.display();
        current.display();
        business.display();
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>
#include <string>
using namespace std;

// Abstract Product: Furniture Item
class Furniture {
public:
    virtual void display() = 0;
};

// Concrete Products: Sofa, Chair, Table
class Sofa : public Furniture {
public:
    void display() override {
        cout << "Sofa" << endl;
    }
};

class Chair : public Furniture {
public:
    void display() override {
        cout << "Chair" << endl;
    }
};

class Table : public Furniture {
public:
    void display() override {
        cout << "Table" << endl;
    }
};

// Abstract Creator: Furniture Factory
class FurnitureFactory {
public:
    virtual Furniture* createFurniture() = 0;
};

// Concrete Creators: Sofa Factory, Chair Factory, Table Factory
class SofaFactory : public FurnitureFactory {
public:
    Furniture* createFurniture() override {
        return new Sofa();
    }
};

class ChairFactory : public FurnitureFactory {
public:
    Furniture* createFurniture() override {
        return new Chair();
    }
};

class TableFactory : public FurnitureFactory {
public:
    Furniture* createFurniture() override {
        return new Table();
    }
};

int main() {
    // Create factories for different types of furniture
    FurnitureFactory* sofaFactory = new SofaFactory();
    FurnitureFactory* chairFactory = new ChairFactory();
    FurnitureFactory* tableFactory = new TableFactory();

    // Create furniture objects using the factory methods
    Furniture* sofa = sofaFactory->createFurniture();
    Furniture* chair = chairFactory->createFurniture();
    Furniture* table = tableFactory->createFurniture();

    // Display the created furniture items
    sofa->display();
    chair->display();
    table->display();

    // Clean up objects
    delete sofaFactory;
    delete chairFactory;
    delete tableFactory;
    delete sofa;
    delete chair;
    delete table;

    return 0;
}

// Implementation Layer
interface NavigationImpl {
    void navigateTo(String destination);
}

// Concrete Implementation: Google Maps
class GoogleMaps implements NavigationImpl {
    public void navigateTo(String destination) {
        System.out.println("Google Maps.");
        // Actual navigation logic using Google Maps API
    }
}

// Concrete Implementation: Apple Maps
class AppleMaps implements NavigationImpl {
    public void navigateTo(String destination) {
        System.out.println("Apple Maps.");
        // Actual navigation logic using Apple Maps API
    }
}

// Abstraction Layer
abstract class NavigationSystem {
    protected NavigationImpl navigationImpl;

    public void setNavigationImpl(NavigationImpl impl) {
        this.navigationImpl = impl;
    }

    public abstract void navigate(String destination);
}

// Concrete Abstraction: UberRide
class UberRide extends NavigationSystem {
    private String driverName;

    public UberRide(String driverName) {
        this.driverName = driverName;
    }

    @Override
    public void navigate(String destination) {
        System.out.print("Uber ride with " + driverName + " to " + destination + " using ");
        navigationImpl.navigateTo(destination);
    }
}

// Concrete Abstraction: UberEats
class UberEats extends NavigationSystem {
    private String restaurantName;

    public UberEats(String restaurantName) {
        this.restaurantName = restaurantName;
    }

    @Override
    public void navigate(String destination) {
        System.out.print("Uber Eats delivery from " + restaurantName + " to " + destination + " using ");
        navigationImpl.navigateTo(destination);
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        UberRide uberRide = new UberRide("Keerti");

        NavigationImpl googleMaps = new GoogleMaps();
        uberRide.setNavigationImpl(googleMaps);
        uberRide.navigate("Central Park");

        System.out.println();

        UberEats uberEats = new UberEats("Pizza Hut");
        NavigationImpl appleMaps = new AppleMaps();
        uberEats.setNavigationImpl(appleMaps);
        uberEats.navigate("Times Square");
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>

using namespace std;

// Implementation Layer
class NavigationImpl
{
public:
    virtual void navigateTo(string destination) = 0;
};

// Concrete Implementation: GoogleMaps
class GoogleMaps : public NavigationImpl
{
public:
    void navigateTo(string destination)
    {
        cout << "Google Maps." << endl;
        // Actual navigation logic using Google Maps API
    }
};

// Concrete Implementation: AppleMaps
class AppleMaps : public NavigationImpl
{
public:
    void navigateTo(string destination)
    {
        cout << "Apple Maps." << endl;
        // Actual navigation logic using Apple Maps API
    }
};

// Abstraction Layer
class NavigationSystem
{
protected:
    NavigationImpl *navigationImpl;

public:
    virtual void navigate(string destination) = 0;
};

// Concrete Abstraction: UberRide
class UberRide : public NavigationSystem
{

private:
    string driverName;

public:
    UberRide(string driverName) : driverName(driverName) {}

    void navigate(string destination)
    {
        cout << "Uber ride with " << driverName << " to " << destination << " using ";
        navigationImpl->navigateTo(destination);
    }

    void setNavigationImpl(NavigationImpl *impl)
    {
        navigationImpl = impl;
    }
};

// Concrete Abstraction: UberEats
class UberEats : public NavigationSystem
{
private:
    string restaurantName;

public:
    UberEats(string restaurantName) : restaurantName(restaurantName) {}

    void navigate(string destination)
    {
        cout << "Uber Eats delivery from " << restaurantName << " to " << destination << " using ";
        navigationImpl->navigateTo(destination);
    }

    void setNavigationImpl(NavigationImpl *impl)
    {
        navigationImpl = impl;
    }
};

int main()
{
    UberRide uber("Keerti");

    GoogleMaps googleMaps;

    uber.setNavigationImpl(&googleMaps);

    uber.navigate("Central Park");

    return 0;
}

#include <iostream>
using namespace std;

class TrafficLightState {
public:
    virtual void handle() = 0;
    virtual ~TrafficLightState() = default;
};

class RedState : public TrafficLightState {
public:
    void handle() override {
        cout << "RED: Stop for 60 seconds\n";
    }
};

class YellowState : public TrafficLightState {
public:
    void handle() override {
        cout << "YELLOW: Prepare to stop for 5 seconds\n";
    }
};

class GreenState : public TrafficLightState {
public:
    void handle() override {
        cout << "GREEN: Go for 45 seconds\n";
    }
};

class TrafficLight {
private:
    TrafficLightState* currentState;
public:
    TrafficLight() : currentState(new RedState()) {}

    void setState(TrafficLightState* newState) {
        delete currentState;       // Clean up old state
        currentState = newState;   // Transition to new state
    }

    void operate() {
        currentState->handle();    // Delegate to current state
    }

    ~TrafficLight() {
        delete currentState;
    }
};

int main() {
    TrafficLight trafficLight;
    // Simulate traffic light cycles
    trafficLight.operate();  // RED
    trafficLight.setState(new YellowState());
    trafficLight.operate();  // YELLOW
    trafficLight.setState(new GreenState());
    trafficLight.operate();  // GREEN
    return 0;
}

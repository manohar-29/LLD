// State Interface
interface TrafficLightState {
    void handle(TrafficLight context);
}

// Context Class
class TrafficLight {
    private TrafficLightState currentState;

    public TrafficLight() {
        this.currentState = new RedState();  // Initial state
    }

    public void setState(TrafficLightState newState) {
        this.currentState = newState;
    }

    public void operate() {
        currentState.handle(this);
    }
}

// Concrete State: Red
class RedState implements TrafficLightState {
    @Override
    public void handle(TrafficLight context) {
        System.out.println("RED: Stop for 60 seconds");
        context.setState(new YellowState());
    }
}

// Concrete State: Yellow
class YellowState implements TrafficLightState {
    @Override
    public void handle(TrafficLight context) {
        System.out.println("GREEN: Go for 45 seconds");
        context.setState(new GreenState());
    }
}

// Concrete State: Green
class GreenState implements TrafficLightState {
    @Override
    public void handle(TrafficLight context) {
        System.out.println("YELLOW: Prepare to stop for 5 seconds");
        context.setState(new RedState());
    }
}

// Main Class
public class Main {
    public static void main(String[] args) {
        TrafficLight trafficLight = new TrafficLight();

        // Simulate multiple state transitions
        for (int i = 0; i < 6; i++) {
            trafficLight.operate();
        }
    }
}


#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################


#include <iostream>
using namespace std;

/* forward declaration is necessary when you reference a class before it's fully defined. Line6-Line11 && Line17-Line47. */

class TrafficLight;  // Forward declaration

// State Interface
class TrafficLightState {
public:
    virtual void handle(TrafficLight* context) = 0;
    virtual ~TrafficLightState() {}
};

// Forward declaration of concrete states so they can be used inside each other
class RedState;
class YellowState;
class GreenState;

// Traffic Light (Context)
class TrafficLight {
private:
    TrafficLightState* currentState;

public:
    TrafficLight() : currentState(new RedState()) {}

    void setState(TrafficLightState* newState) {
        delete currentState;       // Clean up old state
        currentState = newState;
    }

    void operate() {
        currentState->handle(this);
    }

    ~TrafficLight() {
        delete currentState;
    }
};

// Concrete States
class RedState : public TrafficLightState {
public:
    void handle(TrafficLight* context) override {
        cout << "RED: Stop for 60 seconds\n";
        context->setState(new YellowState());  // Auto-transition
    }
};

class YellowState : public TrafficLightState {
public:
    void handle(TrafficLight* context) override {
        cout << "GREEN: Go for 45 seconds\n";
        context->setState(new GreenState());  // Auto-transition
    }
};

class GreenState : public TrafficLightState {
public:
    void handle(TrafficLight* context) override {
        cout << "YELLOW: Prepare to stop for 5 seconds\n";
        context->setState(new RedState());  // Loop back to Red
    }
};

// Client Code
int main() {
    TrafficLight trafficLight;

    // Simulate multiple state transitions
    for (int i = 0; i < 6; ++i) {
        trafficLight.operate();
    }

    return 0;
}
